#!/usr/bin/python3

import os
os.environ['PYGAME_HIDE_SUPPORT_PROMPT'] = "hide"
from pygame import *
import random
import time
from sys import argv

size = 8
TIME_REFRESH = 2.1

if len(argv) != 2:
    print("Please provide an image as argument")
    exit(84)
try:
    tiles = [image.load("assets/{img}/blank.png".format(img=argv[1])),
             image.load("assets/{img}/up.png".format(img=argv[1])),
             image.load("assets/{img}/right.png".format(img=argv[1])),
             image.load("assets/{img}/down.png".format(img=argv[1])),
             image.load("assets/{img}/left.png".format(img=argv[1]))]
except (FileNotFoundError, IndexError):
    print("Please provide a correct image :")
    print("mountains, pipes, polka or roads")
    exit(84)

BLANK = 0
UP = 1
RIGHT = 2
DOWN = 3
LEFT = 4

solutions = [[[BLANK, UP],
             [BLANK, RIGHT],
             [BLANK, DOWN],
             [BLANK, LEFT]],
            [[RIGHT, LEFT, DOWN],
            [LEFT, UP, DOWN],
            [BLANK, DOWN],
            [RIGHT, UP, DOWN]],
            [[RIGHT, LEFT, DOWN],
            [LEFT, UP, DOWN],
            [RIGHT, LEFT, UP],
            [BLANK, LEFT]],
            [[BLANK, UP],
            [LEFT, UP, DOWN],
            [RIGHT, LEFT, UP],
            [RIGHT, UP, DOWN]],
            [[RIGHT, LEFT, DOWN],
            [BLANK, RIGHT],
            [RIGHT, LEFT, UP],
            [UP, DOWN, RIGHT]]]

grid = [[None for i in range(size)] for a in range(size)]


def generate_grid():
    for i in range(size):
        for j in range(size):
            grid[i][j] = {"collapsed": False, "options": [BLANK, UP, RIGHT, DOWN, LEFT]}


for i in range(len(tiles)):
    tiles[i] = transform.scale(tiles[i], (1920 / size, 1080 / size))


def draw_tiles(screen):
    for i in range(size):
        for j in range(size):
            if grid[i][j]["collapsed"]:
                screen.blit(tiles[grid[i][j]["options"][0]], (1920 / size * j, 1080 / size * i))
                display.flip()
                time.sleep(0.001)


def changeUp(tile_to_print):
    type_of_tile = tile_to_print[0]["options"]
    index_of_tile = (tile_to_print[1], tile_to_print[2])
    wrong_options = [BLANK, UP, RIGHT, DOWN, LEFT]
    if index_of_tile[0] == 0:
        return
    if grid[index_of_tile[0] - 1][index_of_tile[1]]["collapsed"]:
        return
    valid_options = solutions[type_of_tile[0]][0]
    for option in valid_options:
        if option in wrong_options:
            wrong_options.remove(option)
    for option in wrong_options:
        if option in grid[index_of_tile[0] - 1][index_of_tile[1]]["options"]:
            grid[index_of_tile[0] - 1][index_of_tile[1]]["options"].remove(option)


def changeRight(tile_to_print):
    type_of_tile = tile_to_print[0]["options"]
    index_of_tile = (tile_to_print[1], tile_to_print[2])
    wrong_options = [BLANK, UP, RIGHT, DOWN, LEFT]
    if index_of_tile[1] == size - 1:
        return
    if grid[index_of_tile[0]][index_of_tile[1] + 1]["collapsed"]:
        return
    valid_options = solutions[type_of_tile[0]][1]
    for option in valid_options:
        if option in wrong_options:
            wrong_options.remove(option)
    for option in wrong_options:
        if option in grid[index_of_tile[0]][index_of_tile[1] + 1]["options"]:
            grid[index_of_tile[0]][index_of_tile[1] + 1]["options"].remove(option)


def changeDown(tile_to_print):
    type_of_tile = tile_to_print[0]["options"]
    index_of_tile = (tile_to_print[1], tile_to_print[2])
    wrong_options = [BLANK, UP, RIGHT, DOWN, LEFT]
    if index_of_tile[0] == size - 1:
        return
    if grid[index_of_tile[0] + 1][index_of_tile[1]]["collapsed"]:
        return
    valid_options = solutions[type_of_tile[0]][2]
    for option in valid_options:
        if option in wrong_options:
            wrong_options.remove(option)
    for option in wrong_options:
        if option in grid[index_of_tile[0] + 1][index_of_tile[1]]["options"]:
            grid[index_of_tile[0] + 1][index_of_tile[1]]["options"].remove(option)


def changeLeft(tile_to_print):
    type_of_tile = tile_to_print[0]["options"]
    index_of_tile = (tile_to_print[1], tile_to_print[2])
    wrong_options = [BLANK, UP, RIGHT, DOWN, LEFT]
    if index_of_tile[1] == 0:
        return
    if grid[index_of_tile[0]][index_of_tile[1] - 1]["collapsed"]:
        return
    valid_options = solutions[type_of_tile[0]][3]
    for option in valid_options:
        if option in wrong_options:
            wrong_options.remove(option)
    for option in wrong_options:
        if option in grid[index_of_tile[0]][index_of_tile[1] - 1]["options"]:
            grid[index_of_tile[0]][index_of_tile[1] - 1]["options"].remove(option)


def set_entropy():
    for i in range(size):
        for j in range(size):
            print("grid[{i}][{j}] = {g}".format(i=i, j=j, g=grid[i][j]))
            if not grid[i][j]["collapsed"]:
                option_min = len(grid[i][j]["options"])
    copy_array = []
    for i in range(size):
        for j in range(size):
            if len(grid[i][j]["options"]) < option_min and not grid[i][j]["collapsed"]:
                option_min = len(grid[i][j]["options"])
    for i in range(size):
        for j in range(size):
            if len(grid[i][j]["options"]) == option_min and not grid[i][j]["collapsed"]:
                copy_array.append((grid[i][j], i, j))
    tile_to_print = random.choice(copy_array)
    tile_to_print[0]["collapsed"] = True
    if len(tile_to_print[0]["options"]) == 0:
        return
    tile_to_print[0]["options"] = [random.choice(tile_to_print[0]["options"])]
    changeUp(tile_to_print)
    changeRight(tile_to_print)
    changeDown(tile_to_print)
    changeLeft(tile_to_print)


def display_generation(screen):
    generate_grid()
    for i in range(size * size):
        set_entropy()
    print(grid)
    draw_tiles(screen)
    bool = True
    chrono = time.time()
    while bool:
        for i in event.get():
            if i.type == QUIT:
                bool = False
                return
        if time.time() - chrono > TIME_REFRESH:
            break
    screen.fill((0, 0, 0))
    display.flip()
    time.sleep(0.2)
    display_generation(screen)


def main():
    if len(argv) != 2:
        print("You must provide an image as argument")
    init()
    screen = display.set_mode((1920, 1080))
    display_generation(screen)


if __name__ == '__main__':
    main()
